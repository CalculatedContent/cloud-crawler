Installing Cloud Crawler on a Local Machine
===========================================

# Dependencies

* Mac or Linux (Windows not supported)
* Ruby 1.9.3 with Bundler   http://gembundler.com/
* Redis 2.6.x  (stable)     http://redis.io/download

It is suggested to use RVM to install ruby
https://rvm.io/

and to use git to obtain the source
http://git-scm.com/


# Installation

1. Install ruby 1.9.3, and redis 2.6.x

```
	bash$ curl -L https://get.rvm.io | bash -s stable --ruby=1.9.3
	bash$ export PATH=$PATH:~/.rvm/bin/
	bash$ rvm use 1.9.3
	bash$ sudo apt-get install redis-server
	bash$ sudo apt-get install git
```

2. Install bundler
  
	bash$ gem install bundler --no-rdoc --no-ri

3. Clone the git source

	bash$ git clone git://github.com/CalculatedContent/cloud-crawler.git

4. Install the required gems and sources

	1. Change directories to where the Gemfile.lock file is located

		bash$ cd cloud_crawler/cloud-crawler

	2. Install the gems and required source and build the gem

		bash$ bundle install

		or to create a complete, sandbox:

		bash$ bundle install --path vendor/bundle
  
		This will install the cloud_crawler in a local bundle gem repository.

		We use bundler locally because we also use this on Amazon AWS / ec2 machines.


# Testing the Installation

1. Start the redis server (if not started automatically at install)

	bash$ redis-server &
  
2. Run the Unit Tests

	bash$ bundle exec rake
  
	This should run the local unit tests, but they are probably all broken by now :P

3. Run a test crawl

	bash$ bundle exec ./test/test_crawl.rb -u http://calculatedcontent.com

4. Check the pages are in redis

```
	bash$ redis-cli
	redis> keys *
	redis> get "cc:pages:http://calculatedcontent.com/"   
```

# Try a real crawl using the DSL

1. Flush the redis database 

	bash$ redis-cli flushdb

2. Load the first job into redis

	bash$ bundle exec ./examples/crossfit_crawl.rb
  
3. Run the worker job
  
	bash$ bundle exec ./bin/run_worker.rb
  
# Monitoring jobs
 
	To view the queue monitor in a browser

	bash$ bundle exec qless-web

	This should launch a tab in the web browser.

	If this fails, the monitor may still work, and may be visible in your browser at

	http://localhost:5678
